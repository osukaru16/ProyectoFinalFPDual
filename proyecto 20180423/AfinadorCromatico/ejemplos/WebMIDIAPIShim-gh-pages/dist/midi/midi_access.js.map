{"version":3,"sources":["../../src/midi/midi_access.js"],"names":["createMIDIAccess","dispatchEvent","closeAllMIDIInputs","getMIDIDeviceId","midiAccess","jazzInstance","midiInputs","midiOutputs","midiInputIds","midiOutputIds","listeners","MIDIAccess","sysexEnabled","inputs","outputs","type","listener","has","add","delete","Promise","resolve","reject","browser","message","instance","createMIDIPorts","setupListeners","callback","MidiInList","MidiOutList","numInputs","length","numOutputs","loopCreateMIDIPort","index","max","list","name","createMIDIPort","port","info","Support","MidiInInfo","set","id","MidiOutInfo","getPortByName","ports","values","i","OnDisconnectMidiIn","undefined","state","close","_jazzInstance","inputInUse","OnDisconnectMidiOut","outputInUse","OnConnectMidiIn","OnConnectMidiOut","evt","onstatechange","forEach","input","MidiInClose","get"],"mappings":"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","file":"midi_access.js","sourcesContent":["/*\n  Creates a MIDIAccess instance:\n  - Creates MIDIInput and MIDIOutput instances for the initially connected MIDI devices.\n  - Keeps track of newly connected devices and creates the necessary instances of MIDIInput and MIDIOutput.\n  - Keeps track of disconnected devices and removes them from the inputs and/or outputs map.\n  - Creates a unique id for every device and stores these ids by the name of the device:\n    so when a device gets disconnected and reconnected again, it will still have the same id. This\n    is in line with the behavior of the native MIDIAccess object.\n\n*/\n\nimport MIDIInput from './midi_input';\nimport MIDIOutput from './midi_output';\nimport MIDIConnectionEvent from './midiconnection_event';\nimport { createJazzInstance, getJazzInstance } from '../util/jazz_instance';\nimport { getDevice, generateUUID } from '../util/util';\nimport Store from '../util/store';\n\nlet midiAccess;\nlet jazzInstance;\nconst midiInputs = new Store();\nconst midiOutputs = new Store();\nconst midiInputIds = new Store();\nconst midiOutputIds = new Store();\nconst listeners = new Store();\n\nclass MIDIAccess {\n    constructor(midiInputs, midiOutputs) {\n        this.sysexEnabled = true;\n        this.inputs = midiInputs;\n        this.outputs = midiOutputs;\n    }\n\n    addEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n        if (listeners.has(listener) === false) {\n            listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n        if (listeners.has(listener) === true) {\n            listeners.delete(listener);\n        }\n    }\n}\n\n\nexport function createMIDIAccess() {\n    return new Promise(((resolve, reject) => {\n        if (typeof midiAccess !== 'undefined') {\n            resolve(midiAccess);\n            return;\n        }\n\n        if (getDevice().browser === 'ie9') {\n            reject({ message: 'WebMIDIAPIShim supports Internet Explorer 10 and above.' });\n            return;\n        }\n\n        createJazzInstance((instance) => {\n            if (typeof instance === 'undefined' || instance === null) {\n                reject({ message: 'No access to MIDI devices: your browser does not support the WebMIDI API and the Jazz plugin is not installed.' });\n                return;\n            }\n\n            jazzInstance = instance;\n\n            createMIDIPorts(() => {\n                setupListeners();\n                midiAccess = new MIDIAccess(midiInputs, midiOutputs);\n                resolve(midiAccess);\n            });\n        });\n    }));\n}\n\n\n// create MIDIInput and MIDIOutput instances for all initially connected MIDI devices\nfunction createMIDIPorts(callback) {\n    const inputs = jazzInstance.MidiInList();\n    const outputs = jazzInstance.MidiOutList();\n    const numInputs = inputs.length;\n    const numOutputs = outputs.length;\n\n    loopCreateMIDIPort(0, numInputs, 'input', inputs, () => {\n        loopCreateMIDIPort(0, numOutputs, 'output', outputs, callback);\n    });\n}\n\n\nfunction loopCreateMIDIPort(index, max, type, list, callback) {\n    if (index < max) {\n        const name = list[index++];\n        createMIDIPort(type, name, () => {\n            loopCreateMIDIPort(index, max, type, list, callback);\n        });\n    } else {\n        callback();\n    }\n}\n\n\nfunction createMIDIPort(type, name, callback) {\n    getJazzInstance(type, (instance) => {\n        let port;\n        let info = [name, '', ''];\n        if (type === 'input') {\n            if (instance.Support('MidiInInfo')) {\n                info = instance.MidiInInfo(name);\n            }\n            port = new MIDIInput(info, instance);\n            midiInputs.set(port.id, port);\n        } else if (type === 'output') {\n            if (instance.Support('MidiOutInfo')) {\n                info = instance.MidiOutInfo(name);\n            }\n            port = new MIDIOutput(info, instance);\n            midiOutputs.set(port.id, port);\n        }\n        callback(port);\n    });\n}\n\n\n// lookup function: Jazz gives us the name of the connected/disconnected MIDI devices but we have stored them by id\nfunction getPortByName(ports, name) {\n    let port;\n    const values = ports.values();\n    for (let i = 0; i < values.length; i += 1) {\n        port = values[i];\n        if (port.name === name) {\n            break;\n        }\n    }\n    return port;\n}\n\n\n// keep track of connected/disconnected MIDI devices\nfunction setupListeners() {\n    jazzInstance.OnDisconnectMidiIn((name) => {\n        const port = getPortByName(midiInputs, name);\n        if (port !== undefined) {\n            port.state = 'disconnected';\n            port.close();\n            port._jazzInstance.inputInUse = false;\n            midiInputs.delete(port.id);\n            dispatchEvent(port);\n        }\n    });\n\n    jazzInstance.OnDisconnectMidiOut((name) => {\n        const port = getPortByName(midiOutputs, name);\n        if (port !== undefined) {\n            port.state = 'disconnected';\n            port.close();\n            port._jazzInstance.outputInUse = false;\n            midiOutputs.delete(port.id);\n            dispatchEvent(port);\n        }\n    });\n\n    jazzInstance.OnConnectMidiIn((name) => {\n        createMIDIPort('input', name, (port) => {\n            dispatchEvent(port);\n        });\n    });\n\n    jazzInstance.OnConnectMidiOut((name) => {\n        createMIDIPort('output', name, (port) => {\n            dispatchEvent(port);\n        });\n    });\n}\n\n\n// when a device gets connected/disconnected both the port and MIDIAccess dispatch a MIDIConnectionEvent\n// therefor we call the ports dispatchEvent function here as well\nexport function dispatchEvent(port) {\n    port.dispatchEvent(new MIDIConnectionEvent(port, port));\n\n    const evt = new MIDIConnectionEvent(midiAccess, port);\n\n    if (typeof midiAccess.onstatechange === 'function') {\n        midiAccess.onstatechange(evt);\n    }\n    listeners.forEach(listener => listener(evt));\n}\n\n\nexport function closeAllMIDIInputs() {\n    midiInputs.forEach((input) => {\n        // input.close();\n        input._jazzInstance.MidiInClose();\n    });\n}\n\n\n// check if we have already created a unique id for this device, if so: reuse it, if not: create a new id and store it\nexport function getMIDIDeviceId(name, type) {\n    let id;\n    if (type === 'input') {\n        id = midiInputIds.get(name);\n        if (id === undefined) {\n            id = generateUUID();\n            midiInputIds.set(name, id);\n        }\n    } else if (type === 'output') {\n        id = midiOutputIds.get(name);\n        if (id === undefined) {\n            id = generateUUID();\n            midiOutputIds.set(name, id);\n        }\n    }\n    return id;\n}\n\n"]}