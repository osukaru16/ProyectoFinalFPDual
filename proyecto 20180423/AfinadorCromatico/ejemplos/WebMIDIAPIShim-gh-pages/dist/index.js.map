{"version":3,"sources":["../src/index.js"],"names":["Input","Output","midiAccess","init","navigator","requestMIDIAccess","undefined","scope","MIDIInput","MIDIOutput","MIDIMessageEvent","MIDIConnectionEvent","nodejs","close"],"mappings":";;AAAA;;AACA;;AAGA;;IAAYA,K;;AACZ;;IAAYC,M;;AACZ;;;;AACA;;;;;;;;AALA;AACA;AAMA,IAAIC,mBAAJ;;AAEA,IAAMC,OAAO,SAAPA,IAAO,GAAM;AACf,QAAI,CAACC,UAAUC,iBAAf,EAAkC;AAC9B;AACA;;AAEAD,kBAAUC,iBAAV,GAA8B,YAAM;AAChC;AACA,gBAAIH,eAAeI,SAAnB,EAA8B;AAC1BJ,6BAAa,oCAAb;AACA;AACA,oBAAMK,QAAQ,qBAAd;AACAA,sBAAMC,SAAN,GAAkBR,KAAlB;AACAO,sBAAME,UAAN,GAAmBR,MAAnB;AACAM,sBAAMG,gBAAN;AACAH,sBAAMI,mBAAN;AACH;AACD,mBAAOT,UAAP;AACH,SAZD;AAaA,YAAI,uBAAYU,MAAZ,KAAuB,IAA3B,EAAiC;AAC7BR,sBAAUS,KAAV,GAAkB,YAAM;AACpB;AACA;AACA;AACH,aAJD;AAKH;AACJ;AACJ,CA1BD;;AA4BAV","file":"index.js","sourcesContent":["import { createMIDIAccess, closeAllMIDIInputs } from './midi/midi_access';\nimport { polyfill, getDevice, getScope } from './util/util';\n// import MIDIInput from './midi/midi_input';\n// import MIDIOutput from './midi/midi_output';\nimport * as Input from './midi/midi_input';\nimport * as Output from './midi/midi_output';\nimport MIDIMessageEvent from './midi/midimessage_event';\nimport MIDIConnectionEvent from './midi/midiconnection_event';\n\nlet midiAccess;\n\nconst init = () => {\n    if (!navigator.requestMIDIAccess) {\n        // Add some functionality to older browsers\n        polyfill();\n\n        navigator.requestMIDIAccess = () => {\n            // Singleton-ish, no need to create multiple instances of MIDIAccess\n            if (midiAccess === undefined) {\n                midiAccess = createMIDIAccess();\n                // Add global vars that mimic WebMIDI API native globals\n                const scope = getScope();\n                scope.MIDIInput = Input;\n                scope.MIDIOutput = Output;\n                scope.MIDIMessageEvent = MIDIMessageEvent;\n                scope.MIDIConnectionEvent = MIDIConnectionEvent;\n            }\n            return midiAccess;\n        };\n        if (getDevice().nodejs === true) {\n            navigator.close = () => {\n                // For Nodejs applications we need to add a method that closes all MIDI input ports,\n                // otherwise Nodejs will wait for MIDI input forever.\n                closeAllMIDIInputs();\n            };\n        }\n    }\n};\n\ninit();\n"]}