{"version":3,"sources":["../../src/midi/midi_output.js"],"names":["MIDIOutput","info","instance","id","name","manufacturer","version","type","state","connection","onmidimessage","onstatechange","_listeners","_inLongSysexMessage","_sysexBuffer","Uint8Array","_jazzInstance","outputInUse","platform","MidiOutOpen","MidiOutClose","clear","data","timestamp","delayBeforeSend","length","Math","floor","performance","now","setTimeout","MidiOutLong","listener","has","add","delete","evt","forEach"],"mappings":"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","file":"midi_output.js","sourcesContent":["/*\n  MIDIOutput is a wrapper around an output of a Jazz instance\n*/\nimport { getDevice } from '../util/util';\nimport Store from '../util/store';\nimport { dispatchEvent, getMIDIDeviceId } from './midi_access';\n\nexport default class MIDIOutput {\n    constructor(info, instance) {\n        this.id = getMIDIDeviceId(info[0], 'output');\n        this.name = info[0];\n        this.manufacturer = info[1];\n        this.version = info[2];\n        this.type = 'output';\n        this.state = 'connected';\n        this.connection = 'pending';\n        this.onmidimessage = null;\n        this.onstatechange = null;\n\n        this._listeners = new Store();\n        this._inLongSysexMessage = false;\n        this._sysexBuffer = new Uint8Array();\n\n        this._jazzInstance = instance;\n        this._jazzInstance.outputInUse = true;\n        if (getDevice().platform === 'linux') {\n            this._jazzInstance.MidiOutOpen(this.name);\n        }\n    }\n\n    open() {\n        if (this.connection === 'open') {\n            return;\n        }\n        if (getDevice().platform !== 'linux') {\n            this._jazzInstance.MidiOutOpen(this.name);\n        }\n        this.connection = 'open';\n        dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n    }\n\n    close() {\n        if (this.connection === 'closed') {\n            return;\n        }\n        if (getDevice().platform !== 'linux') {\n            this._jazzInstance.MidiOutClose();\n        }\n        this.connection = 'closed';\n        dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n        this.onstatechange = null;\n        this._listeners.clear();\n    }\n\n    send(data, timestamp) {\n        let delayBeforeSend = 0;\n\n        if (data.length === 0) {\n            return false;\n        }\n\n        if (timestamp) {\n            delayBeforeSend = Math.floor(timestamp - performance.now());\n        }\n\n        if (timestamp && (delayBeforeSend > 1)) {\n            setTimeout(() => {\n                this._jazzInstance.MidiOutLong(data);\n            }, delayBeforeSend);\n        } else {\n            this._jazzInstance.MidiOutLong(data);\n        }\n        return true;\n    }\n\n    clear() {\n        // to be implemented\n    }\n\n    addEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n\n        if (this._listeners.has(listener) === false) {\n            this._listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n\n        if (this._listeners.has(listener) === true) {\n            this._listeners.delete(listener);\n        }\n    }\n\n    dispatchEvent(evt) {\n        this._listeners.forEach((listener) => {\n            listener(evt);\n        });\n\n        if (this.onstatechange !== null) {\n            this.onstatechange(evt);\n        }\n    }\n}\n"]}