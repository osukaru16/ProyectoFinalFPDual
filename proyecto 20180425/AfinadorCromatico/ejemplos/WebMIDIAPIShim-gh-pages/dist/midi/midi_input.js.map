{"version":3,"sources":["../../src/midi/midi_input.js"],"names":["midiProc","nodejs","MIDIInput","info","instance","id","name","manufacturer","version","type","state","connection","onstatechange","_onmidimessage","Object","defineProperty","set","value","open","_listeners","_inLongSysexMessage","_sysexBuffer","Uint8Array","_jazzInstance","inputInUse","platform","MidiInOpen","bind","listener","listeners","get","has","add","delete","evt","forEach","MidiInClose","clear","data","oldLength","length","tmpBuffer","initialOffset","j","_appendToSysexBuffer","slice","timestamp","i","isSysexMessage","isValidMessage","_bufferLongSysex","receivedTime","parseFloat","toString","_perfTimeZero","e","dispatchEvent"],"mappings":"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","file":"midi_input.js","sourcesContent":["/*\n  MIDIInput is a wrapper around an input of a Jazz instance\n*/\n\nimport MIDIMessageEvent from './midimessage_event';\nimport MIDIConnectionEvent from './midiconnection_event';\nimport { dispatchEvent, getMIDIDeviceId } from './midi_access';\nimport { getDevice } from '../util/util';\nimport Store from '../util/store';\n\nlet midiProc;\nconst nodejs = getDevice().nodejs;\n\nexport default class MIDIInput {\n    constructor(info, instance) {\n        this.id = getMIDIDeviceId(info[0], 'input');\n        this.name = info[0];\n        this.manufacturer = info[1];\n        this.version = info[2];\n        this.type = 'input';\n        this.state = 'connected';\n        this.connection = 'pending';\n\n        this.onstatechange = null;\n        this._onmidimessage = null;\n        // because we need to implicitly open the device when an onmidimessage handler gets added\n        // we define a setter that opens the device if the set value is a function\n        Object.defineProperty(this, 'onmidimessage', {\n            set(value) {\n                this._onmidimessage = value;\n                if (typeof value === 'function') {\n                    this.open();\n                }\n            },\n        });\n\n        this._listeners = new Store().set('midimessage', new Store()).set('statechange', new Store());\n        this._inLongSysexMessage = false;\n        this._sysexBuffer = new Uint8Array();\n\n        this._jazzInstance = instance;\n        this._jazzInstance.inputInUse = true;\n\n        // on Linux opening and closing Jazz instances causes the plugin to crash a lot so we open\n        // the device here and don't close it when close() is called, see below\n        if (getDevice().platform === 'linux') {\n            this._jazzInstance.MidiInOpen(this.name, midiProc.bind(this));\n        }\n    }\n\n    addEventListener(type, listener) {\n        const listeners = this._listeners.get(type);\n        if (typeof listeners === 'undefined') {\n            return;\n        }\n\n        if (listeners.has(listener) === false) {\n            listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        const listeners = this._listeners.get(type);\n        if (typeof listeners === 'undefined') {\n            return;\n        }\n\n        if (listeners.has(listener) === true) {\n            listeners.delete(listener);\n        }\n    }\n\n    dispatchEvent(evt) {\n        const listeners = this._listeners.get(evt.type);\n        listeners.forEach((listener) => {\n            listener(evt);\n        });\n\n        if (evt.type === 'midimessage') {\n            if (this._onmidimessage !== null) {\n                this._onmidimessage(evt);\n            }\n        } else if (evt.type === 'statechange') {\n            if (this.onstatechange !== null) {\n                this.onstatechange(evt);\n            }\n        }\n    }\n\n    open() {\n        if (this.connection === 'open') {\n            return;\n        }\n        if (getDevice().platform !== 'linux') {\n            this._jazzInstance.MidiInOpen(this.name, midiProc.bind(this));\n        }\n        this.connection = 'open';\n        dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n    }\n\n    close() {\n        if (this.connection === 'closed') {\n            return;\n        }\n        if (getDevice().platform !== 'linux') {\n            this._jazzInstance.MidiInClose();\n        }\n        this.connection = 'closed';\n        dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n        this._onmidimessage = null;\n        this.onstatechange = null;\n        this._listeners.get('midimessage').clear();\n        this._listeners.get('statechange').clear();\n    }\n\n    _appendToSysexBuffer(data) {\n        const oldLength = this._sysexBuffer.length;\n        const tmpBuffer = new Uint8Array(oldLength + data.length);\n        tmpBuffer.set(this._sysexBuffer);\n        tmpBuffer.set(data, oldLength);\n        this._sysexBuffer = tmpBuffer;\n    }\n\n    _bufferLongSysex(data, initialOffset) {\n        let j = initialOffset;\n        while (j < data.length) {\n            if (data[j] == 0xF7) {\n                // end of sysex!\n                j += 1;\n                this._appendToSysexBuffer(data.slice(initialOffset, j));\n                return j;\n            }\n            j += 1;\n        }\n        // didn't reach the end; just tack it on.\n        this._appendToSysexBuffer(data.slice(initialOffset, j));\n        this._inLongSysexMessage = true;\n        return j;\n    }\n}\n\n\nmidiProc = function (timestamp, data) {\n    let length = 0;\n    let i;\n    let isSysexMessage = false;\n\n    // Jazz sometimes passes us multiple messages at once, so we need to parse them out and pass them one at a time.\n\n    for (i = 0; i < data.length; i += length) {\n        let isValidMessage = true;\n        if (this._inLongSysexMessage) {\n            i = this._bufferLongSysex(data, i);\n            if (data[i - 1] != 0xf7) {\n                // ran off the end without hitting the end of the sysex message\n                return;\n            }\n            isSysexMessage = true;\n        } else {\n            isSysexMessage = false;\n            switch (data[i] & 0xF0) {\n            case 0x00: // Chew up spurious 0x00 bytes.  Fixes a Windows problem.\n                length = 1;\n                isValidMessage = false;\n                break;\n\n            case 0x80: // note off\n            case 0x90: // note on\n            case 0xA0: // polyphonic aftertouch\n            case 0xB0: // control change\n            case 0xE0: // channel mode\n                length = 3;\n                break;\n\n            case 0xC0: // program change\n            case 0xD0: // channel aftertouch\n                length = 2;\n                break;\n\n            case 0xF0:\n                switch (data[i]) {\n                case 0xf0: // letiable-length sysex.\n                    i = this._bufferLongSysex(data, i);\n                    if (data[i - 1] != 0xf7) {\n                        // ran off the end without hitting the end of the sysex message\n                        return;\n                    }\n                    isSysexMessage = true;\n                    break;\n\n                case 0xF1: // MTC quarter frame\n                case 0xF3: // song select\n                    length = 2;\n                    break;\n\n                case 0xF2: // song position pointer\n                    length = 3;\n                    break;\n\n                default:\n                    length = 1;\n                    break;\n                }\n                break;\n            }\n        }\n        if (!isValidMessage) {\n            continue;\n        }\n\n        const evt = {};\n        evt.receivedTime = parseFloat(timestamp.toString()) + this._jazzInstance._perfTimeZero;\n\n        if (isSysexMessage || this._inLongSysexMessage) {\n            evt.data = new Uint8Array(this._sysexBuffer);\n            this._sysexBuffer = new Uint8Array(0);\n            this._inLongSysexMessage = false;\n        } else {\n            evt.data = new Uint8Array(data.slice(i, length + i));\n        }\n\n        if (nodejs) {\n            if (this._onmidimessage) {\n                this._onmidimessage(evt);\n            }\n        } else {\n            const e = new MIDIMessageEvent(this, evt.data, evt.receivedTime);\n            this.dispatchEvent(e);\n        }\n    }\n};\n"]}